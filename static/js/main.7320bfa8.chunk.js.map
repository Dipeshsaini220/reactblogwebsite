{"version":3,"sources":["firebase.js","features/userSlice.js","components/Header/Header.js","features/blogSlice.js","components/Blogs/Blog/Blog.js","components/Blogs/Blogs.js","components/Blogs/AddBlog/AddBlog.js","components/Blogs/BlogDisplay/BlogDisplay.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","Header","useSelector","className","to","onClick","signOut","class","alt","Avatar","src","photo","Button","signInWithPopup","catch","error","alert","message","variant","color","blogSlice","blogId","blogTitle","blogContent","blogAuthor","setBlog","blogTimestamp","selectBlogId","blog","selectBlogTitle","selectBlogContent","selectBlogAuthor","Blog","str","id","title","content","timestamp","username","thumbnailUrl","dispatch","useDispatch","history","useHistory","push","length","substring","Blogs","useState","blogs","setBlogs","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","startIcon","AddBlog","setTitle","setContent","value","onChange","e","target","type","preventDefault","add","displayName","FieldValue","serverTimestamp","BlogDisplay","author","App","onAuthStateChanged","authUser","uid","photoURL","email","path","exact","configureStore","reducer","userReducer","blogReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7320bfa8.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n\tapiKey: 'AIzaSyB4alRRpa9ijM4hEhBgRGirLRzweYIoaIs',\n\tauthDomain: 'blog-app-4233f.firebaseapp.com',\n\tprojectId: 'blog-app-4233f',\n\tstorageBucket: 'blog-app-4233f.appspot.com',\n\tmessagingSenderId: '402802890090',\n\tappId: '1:402802890090:web:d5c9a61d823f7484e08113'\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport default db;\nexport { auth, provider };\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n\tname: 'user',\n\tinitialState: {\n\t\tuser: null\n\t},\n\treducers: {\n\t\tlogin: (state, action) => {\n\t\t\tstate.user = action.payload;\n\t\t},\n\t\tlogout: (state) => {\n\t\t\tstate.user = null;\n\t\t}\n\t}\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport { auth, provider } from \"../../firebase\";\nimport { selectUser } from \"../../features/userSlice\";\nimport { useSelector } from \"react-redux\";\nimport { Avatar } from \"@material-ui/core\";\nimport \"./Header.css\";\n\nconst Header = () => {\n  const user = useSelector(selectUser);\n\n  const signIn = () => {\n    auth.signInWithPopup(provider).catch((error) => alert(error.message));\n  };\n\n  const signOut = () => {\n    auth.signOut();\n  };\n\n  return (\n    <div className=\"header\">\n      <div className=\"header__left\">\n        <Link to=\"/\">Blog App</Link>\n      </div>\n\n      {user ? (\n        <div className=\"header__right\">\n          <div className=\"header__icons\">\n            <Link to=\"/\">\n              <i className=\"fas fa-home\"></i>{\" \"}\n            </Link>{\" \"}\n            <Link to=\"#search\">\n              <i className=\"fas fa-search\"></i>{\" \"}\n            </Link>{\" \"}\n            <Link to=\"#notifications\">\n              <i className=\"fas fa-bell\"></i>{\" \"}\n            </Link>\n            <Link>\n              <i onClick={signOut} class=\"fas fa-power-off\" alt=\"Sign Out\"></i>\n            </Link>\n            <Avatar className=\"header__avatar\" src={user.photo}></Avatar>\n          </div>\n        </div>\n      ) : (\n        <Button onClick={signIn} variant=\"contained\" color=\"primary\">\n          Sign In\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default Header;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const blogSlice = createSlice({\n\tname: 'blog',\n\tinitialState: {\n\t\tblogId: null,\n\t\tblogTitle: null,\n\t\tblogContent: null,\n\t\tblogAuthor: null\n\t},\n\treducers: {\n\t\tsetBlog: (state, action) => {\n\t\t\tstate.blogId = action.payload.blogId;\n\t\t\tstate.blogTitle = action.payload.blogTitle;\n\t\t\tstate.blogContent = action.payload.blogContent;\n\t\t\tstate.blogAuthor = action.payload.blogAuthor;\n\t\t\tstate.blogTimestamp = action.payload.blogTimestamp;\n\t\t}\n\t}\n});\n\nexport const { setBlog } = blogSlice.actions;\n\nexport const selectBlogId = (state) => state.blog.blogId;\nexport const selectBlogTitle = (state) => state.blog.blogTitle;\nexport const selectBlogContent = (state) => state.blog.blogContent;\nexport const selectBlogAuthor = (state) => state.blog.blogAuthor;\n\nexport default blogSlice.reducer;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { setBlog } from \"../../../features/blogSlice\";\nimport \"./Blog.css\";\n\nconst Blog = ({ id, title, content, timestamp, thumbnailUrl, username }) => {\n  const truncate = (str) => {\n    return str.length > 10 ? str.substring(0, 75) + \"...\" : str;\n  };\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  return (\n    <div\n      className=\"blog\"\n      onClick={() => {\n        dispatch(\n          setBlog({\n            blogTitle: title,\n            blogContent: content,\n\n            blogAuthor: username,\n            blogId: id,\n          })\n        );\n\n        history.push(`/${id}/read`);\n      }}\n    >\n      <div className=\"blog__content\">\n        <h3 className=\"blog___title\">{title}</h3>\n        <p className=\"blog__timestamp\">{timestamp}</p>\n        <h5 className=\"blog__summary\">{truncate(content)}</h5>\n        <Link className=\"blog__readMore\">Read More...</Link>\n        <p className=\"blog__author\">Blog By {username}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Blog;","import { Button } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { selectUser } from \"../../features/userSlice\";\nimport db from \"../../firebase\";\nimport Blog from \"./Blog/Blog\";\nimport \"./Blogs.css\";\n\nconst Blogs = () => {\n  const user = useSelector(selectUser);\n\n  const [blogs, setBlogs] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"blogs\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) =>\n        setBlogs(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            data: doc.data(),\n          }))\n        )\n      );\n  }, []);\n\n  return (\n    <div className=\"blogs\">\n      {user && (\n        <Link to=\"/addBlog\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<i class=\"fas fa-plus\"></i>}\n          >\n            Add Blog\n          </Button>\n        </Link>\n      )}\n\n      <div className=\"blogs__blogsList\">\n        {blogs.map((blog) => (\n          <Blog\n            key={blog.id}\n            id={blog.id}\n            title={blog.data.title}\n            content={blog.data.content}\n            username={blog.data.username}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Blogs;","import { Button } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../../../features/userSlice\";\nimport db from \"../../../firebase\";\nimport firebase from \"firebase\";\nimport \"./AddBlog.css\";\nimport { useHistory } from \"react-router\";\n\nconst AddBlog = () => {\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n\n  const user = useSelector(selectUser);\n  const history = useHistory();\n\n  const addBlog = (e) => {\n    e.preventDefault();\n\n    db.collection(\"blogs\").add({\n      title: title,\n      content: content,\n\n      username: user.displayName,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n\n    history.push(\"/\");\n  };\n\n  return (\n    <div className=\"addBlog\">\n      <form>\n        <div className=\"addBlog__details\">\n          <h3>Blog Title</h3>\n          <input\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            type=\"text\"\n          />\n\n          <h3>Blog Content</h3>\n          <textarea\n            value={content}\n            onChange={(e) => setContent(e.target.value)}\n            type=\"text\"\n          />\n        </div>\n\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"primary\"\n          onClick={addBlog}\n          startIcon={<i class=\"fas fa-check\"></i>}\n        >\n          Submit\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default AddBlog;","import { Avatar } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport db from \"../../../firebase\";\nimport { selectUser } from \"../../../features/userSlice\";\nimport { useSelector } from \"react-redux\";\nimport \"./BlogDisplay.css\";\n\nconst BlogDisplay = ({ id, title, content, thumbnailUrl, author }) => {\n  const [input, setInput] = useState(\"\");\n\n  const user = useSelector(selectUser);\n\n  useEffect(() => {}, []);\n\n  return (\n    <div className=\"blogDisplay\">\n      <h2 className=\"blogDisplay__title\">{title}</h2>\n      <span className=\"blogDisplay__author\">Author: {author}</span>\n\n      <img className=\"blogDisplay__thumbnail\" src={thumbnailUrl} alt=\"\" />\n      <p className=\"blogDisplay__content\">{content}</p>\n\n      <hr />\n    </div>\n  );\n};\n\nexport default BlogDisplay;","import React, { useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Header from \"./components/Header/Header\";\nimport Blogs from \"./components/Blogs/Blogs\";\nimport { login, logout } from \"./features/userSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { auth } from \"./firebase\";\nimport AddBlog from \"./components/Blogs/AddBlog/AddBlog\";\nimport {\n  selectBlogAuthor,\n  selectBlogContent,\n  selectBlogId,\n  selectBlogTitle,\n} from \"./features/blogSlice\";\nimport \"./App.css\";\nimport BlogDisplay from \"./components/Blogs/BlogDisplay/BlogDisplay\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  const blogId = useSelector(selectBlogId);\n  const blogTitle = useSelector(selectBlogTitle);\n  const blogContent = useSelector(selectBlogContent);\n\n  const blogAuthor = useSelector(selectBlogAuthor);\n\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        dispatch(\n          login({\n            uid: authUser.uid,\n            photo: authUser.photoURL,\n            email: authUser.email,\n            displayName: authUser.displayName,\n          })\n        );\n      } else {\n        dispatch(logout());\n      }\n    });\n  }, []);\n\n  return (\n    <Router>\n      <div className=\"app\">\n        <Header />\n\n        <Switch>\n          <Route path={`/${blogId}/read`}>\n            <BlogDisplay\n              id={blogId}\n              title={blogTitle}\n              content={blogContent}\n              author={blogAuthor}\n            />\n          </Route>\n\n          <Route path=\"/addBlog\">\n            <AddBlog />\n          </Route>\n\n          <Route exact path=\"/\">\n            <div className=\"app__page\">\n              <Blogs />\n            </div>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\nimport blogReducer from '../features/blogSlice';\n\nexport default configureStore({\n\treducer: {\n\t\tuser: userReducer,\n\t\tblog: blogReducer\n\t}\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}